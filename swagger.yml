swagger: "2.0"
info:
  description: "API documentation for Apnarewards endpoint."
  version: "1.0.0"
  title: "Apnarewards Endpoints"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "info@apnareward.com"
  license:
    name: "Apache 2.0"
    url: "https://www.apnareward.com/"
host: "www.apnarewards.com"
basePath: "/api/v1"
tags:
- name: "order"
  description: "Operations about order"
- name: "user"
  description: "Operations about user"
- name: "scheme"
  description: "Operations about scheme"
- name: "product"
  description: "Operations about product"
- name: "schemeProduct"
  description: "Operations about scheme products"
- name: "schemeUser"
  description: "Operations about scheme users"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Add a new user to the store"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "405":
          description: "Invalid input"
  /products:
    post:
      tags:
      - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Prodict object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "405":
          description: "Invalid input"
  /products/{productId}:
    get:
      tags:
      - "product"
      summary: "Get details of a product"
      description: ""
      operationId: "getProduct"
      produces:
      - "application/json"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated product object"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "405":
          description: "Invalid input"
  /order:
    post:
      tags:
      - "order"
      summary: "Place an order"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /order/{orderId}:
    get:
      tags:
      - "order"
      summary: "Find order by ID"
      description: ""
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    put:
      tags:
      - "order"
      summary: "Update order by ID"
      description: ""
      operationId: "updateOrder"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated order object"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /users/schemes:
    post:
        tags:
        - "scheme"
        summary: "Add a new scheme for the user"
        description: ""
        operationId: "addSchemes"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "New scheme object"
          required: true
          schema:
            $ref: "#/definitions/Scheme"
        responses:
          "200":
            description: "successful operation"
            schema:
              type: "object"
              items:
                $ref: "#/definitions/Scheme"
  /schemes/{schemeId}:
    put:
      tags:
      - "scheme"
      summary: "Update scheme status"
      description: ""
      operationId: "updateScheme"
      produces:
      - "application/json"
      parameters:
      - name: "schemeId"
        in: "path"
        description: "The id of the scheme"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated scheme object"
        required: true
        schema:
          $ref: "#/definitions/Scheme"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Scheme"
        "400":
          description: "Invalid schemeId supplied"
  /users/{userId}/schemes:
    get:
      tags:
      - "scheme"
      summary: "Get all schemes for an user"
      description: ""
      operationId: "getSchemes"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id with which schemes are associated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Scheme"
        "400":
          description: "Invalid userId supplied"
        "404":
          description: "User not found"
  /schemes/{schemeId}/products:
    get:
      tags:
      - "schemeProduct"
      summary: "Get all products related to a scheme"
      description: ""
      operationId: "getSchemeProducts"
      produces:
      - "application/json"
      parameters:
      - name: "schemeId"
        in: "path"
        description: "The scheme id with which products are associated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "400":
          description: "Invalid schemeId supplied"
        "404":
          description: "Scheme not found"
    post:
      tags:
      - "schemeProduct"
      summary: "Add a new product to the scheme"
      description: ""
      operationId: "addProductToScheme"
      produces:
      - "application/json"
      parameters:
      - name: "schemeId"
        in: "path"
        description: "The scheme id with which schemes are associated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/Product"
        "400":
          description: "Invalid schemeId supplied"
        "404":
          description: "Scheme not found"
  /schemes/{schemeId}/users:
    get:
      tags:
      - "schemeUser"
      summary: "Get all users related to a scheme"
      description: ""
      operationId: "getSchemeUsers"
      produces:
      - "application/json"
      parameters:
      - name: "schemeId"
        in: "path"
        description: "The scheme id with which users are associated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Invalid schemeId supplied"
        "404":
          description: "Scheme not found"
    post:
      tags:
      - "schemeUser"
      summary: "Add a new user to the scheme"
      description: ""
      operationId: "addUserToScheme"
      produces:
      - "application/json"
      parameters:
      - name: "schemeId"
        in: "path"
        description: "The scheme id with which schemes are associated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/User"
        "400":
          description: "Invalid schemeId supplied"
        "404":
          description: "Scheme not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
        - "processing"
        - "cancelled"
      shipment:
        type: "object"
        description: "Shipment details"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Scheme:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      status:
        type: "string"
        enum:
          - "active"
          - "inactive"
    xml:
      name: "Scheme"
  Product:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      category:
          $ref: "#/definitions/ProductCategory"
      mrp:
        type: "integer"
      offer_price:
        type: "integer"
      dimension:
        type: "string"
      weight:
        type: "string"
      imageUrl:
        type: "string"
      status:
        type: "string"
        enum:
          - "active"
          - "inactive"
    xml:
      name: "Product"
  ProductCategory:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      status:
        type: "string"
        enum:
          - "active"
          - "inactive"
    xml:
      name: "ProductCategory" 
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      logo:
        type: "string"
      profilePic:
        type: "string"
      address:
        type: "string"
      status:
        type: "string"
        enum:
          - "available"
          - "pending"
          - "sold"
        description: "User Status"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"